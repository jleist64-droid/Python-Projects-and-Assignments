{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "accf363e",
   "metadata": {},
   "source": [
    "# Lab 6 While and Functions\n",
    "\n",
    "In this lab you will practice the use of functions and while loops. Functions are the primary and most important methof of code organization and reuse in python. \n",
    "\n",
    "**Problem 1 Helping a little kid**\n",
    "In this problem, say that you are helping a little kid check their math, more spcifically, the child needs help checking thier work on multiplication tables. Thus, being a good programmer. You want to help, and have promised them a program that will generate the multiplication table from 0 through 12 for any number. Thus, using python you will accept a number between 1 and infinity, then you will provide as an output somthing that looks like this: \n",
    "\n",
    "input = 12  \n",
    "\n",
    "12 x 0 = 0  \n",
    "12 X 1 = 12  \n",
    "12 X 2 = 24  \n",
    "and so on until  \n",
    "12 X 12 = 144  \n",
    "\n",
    "Lastly, since a child will be using your program please include a try and except to assure they enter a number. The except should ask the user to enter a number and to try running the program again. \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "3804487e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Please enter a number 1 or greater:  0\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0 x 0 = 0\n",
      "0 x 1 = 0\n",
      "0 x 2 = 0\n",
      "0 x 3 = 0\n",
      "0 x 4 = 0\n",
      "0 x 5 = 0\n",
      "0 x 6 = 0\n",
      "0 x 7 = 0\n",
      "0 x 8 = 0\n",
      "0 x 9 = 0\n",
      "0 x 10 = 0\n",
      "0 x 11 = 0\n",
      "0 x 12 = 0\n"
     ]
    }
   ],
   "source": [
    "try:\n",
    "    num = int(input(\"Please enter a number 1 or greater: \"))\n",
    "    if num < 1:\n",
    "        print(\"Please only enter numbers 1 or greater.\")\n",
    "    else:\n",
    "        for i in range(13):\n",
    "            print(f\"{num} x {i} = {num * i}\")\n",
    "except ValueError:\n",
    "    print(\"Please run the program again and enter a valid number 1 or greater.\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "53b1b18d",
   "metadata": {},
   "source": [
    "**Problem 2** In this problem create a facotrial calculator. As you may recall, the factorial of a number is every number from 1 through that number being multiplied. For example, 5! or 5 factorial, \n",
    "```\n",
    "5! = 1*2*3*4*5 = 120\n",
    "```\n",
    "Thus create a function that given an integer from 1 through infinity it will generate the output to look like the example above. The function should be named fact() thus, if i input fact(3) the output should be:\n",
    "```3! = 1*2*3 = 6```\n",
    "There should also be a catch, which is if a user enters 0 into the function the result should be 1 (i.e. 0! = 1). If the use enters a negative number the user should be prompted with a \"Please enter a positive integer and run code again\" message. The function must use a while loop. \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "f6a70ea1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Please enter a whole number 1 or greater:  -9\n",
      "Please enter a whole number 1 or greater:  0\n",
      "Please enter a whole number 1 or greater:  10\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "10! = 1*2*3*4*5*6*7*8*9*10 = 3628800\n"
     ]
    }
   ],
   "source": [
    "n = 0\n",
    "result = 1\n",
    "expression = \"1\"\n",
    "\n",
    "def fact():\n",
    "    global n, result, expression\n",
    "    n = int(input(\"Please enter a whole number 1 or greater: \"))\n",
    "    \n",
    "    while n < 1:\n",
    "        n = int(input(\"Please enter a whole number 1 or greater: \"))\n",
    "    \n",
    "    for i in range(2, n + 1):\n",
    "        result *= i\n",
    "        expression += f\"*{i}\"\n",
    "        \n",
    "    print(f\"{n}! = {expression} = {result}\")\n",
    "\n",
    "fact()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0f68c17b",
   "metadata": {},
   "source": [
    "**Problem 3** Create a function that will take as input two words with the same number of letters, and returns all the positions in common. For example, say the first word is \"camel\" and the second word is \"gimel\" then the output of the function should return ```[0,0,1,1,1]```. Then use the output of that function in another function that genrates the following output->```['','','m','e','l']```\n",
    "```\n",
    "1 2 3 4 5\n",
    "g i m e l\n",
    "    m e l\n",
    "```\n",
    "Hence, the second function takes the first word given and prints it in full with the appropiate letters, then use the result of the function to only copy the letters in the right locations. Name the first function common_letters and the second function called word_prog. The function word prog basically converts ```[0,0,1,1,1]``` to ```['','','m','e','l']```.\n",
    "\n",
    "Test case: orange and grapes the only letters in common in the same position are r and a. So the first function common_letters should return ```[0,1,1,0,0,0]```. The second function word_prog should return:```['','r','a','','','']```\n",
    "```\n",
    "1 2 3 4 5 6\n",
    "o r a n g e\n",
    "  r a\n",
    "```\n",
    "In other words, the second function should be given a word and the output from common_letters to genrate the output. If the words are of different lengths the code should return an error statement: \"The words differ in length. Please enter two words of the same length.\" Lastly, the function should return the last as a list in the example above.\n",
    "\n",
    "Next, write a function that prints call this function printing_func: \n",
    "```\n",
    "1 2 3 4 5 6\n",
    "o r a n g e\n",
    "  r a\n",
    "```\n",
    "\n",
    "Hint: do not start this with def start with code you can debug then put it into the function format. In addition, to make it look nice consider using the tabulate function. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "2c1f7c08",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Please enter your first word:  orange\n",
      "Please enter your second word, which must be the same length as the first:  grapes\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "1    2    3    4    5    6\n",
      "o    r    a    n    g    e\n",
      "     r    a\n"
     ]
    }
   ],
   "source": [
    "from tabulate import tabulate\n",
    "\n",
    "def common_letters(word1, word2):\n",
    "    if len(word1) != len(word2): return \"Your words are not the same length. Please run the program again and enter two words of the same length.\"\n",
    "    return [1 if word1[i] == word2[i] else 0 for i in range(len(word1))]\n",
    "\n",
    "def word_prog(word, common_spots):\n",
    "    return ['' if pos == 0 else word[i] for i, pos in enumerate(common_spots)]\n",
    "\n",
    "def printing_func(word, common_spots):\n",
    "    print(tabulate([list(word), word_prog(word, common_spots)], headers=[str(i+1) for i in range(len(word))], tablefmt='plain'))\n",
    "\n",
    "entry1 = input(\"Please enter your first word: \")\n",
    "entry2 = input(\"Please enter your second word, which must be the same length as the first: \") \n",
    "print()\n",
    "\n",
    "common_spots = common_letters(entry1, entry2)\n",
    "if isinstance(common_spots, list):\n",
    "    printing_func(entry1, common_spots)\n",
    "else:\n",
    "    print(common_spots)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "anaconda-ai-2024.04-py310",
   "language": "python",
   "name": "conda-env-anaconda-ai-2024.04-py310-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
