{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "90955c42",
   "metadata": {},
   "source": [
    "## Homework 1\n",
    "### Basic Operators in python. \n",
    "The purpose of this assignment is to assure you become orientated with data types commonly found in python. In addition you will be asked to use user input and convert it. \n",
    "\n",
    "**Problem 1**\n",
    "Create a simple user input. Prompt the user to enter a float. Print the data type of the input. Now using the `float` function convert the number to a float. Then print the data type after conversion and the number.  \n",
    "\n",
    "Test Case 1: input: 10.1 <br>\n",
    "output: <br>\n",
    "<class 'str'><br>\n",
    "<class 'float'><br>\n",
    "10.1<br>\n",
    "Test Case 2: input: 3 <br>\n",
    "output: <br>\n",
    "<class 'str'><br>\n",
    "<class 'float'><br>\n",
    "3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "1a2faf32",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Please enter a float:  3\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'str'>\n",
      "<class 'float'>\n",
      "3.0\n"
     ]
    }
   ],
   "source": [
    "user_input = input(\"Please enter a float: \")\n",
    "print(type(user_input))\n",
    "\n",
    "changed_float = float(user_input)\n",
    "print(type(changed_float))\n",
    "print(changed_float)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8a84d9da",
   "metadata": {},
   "source": [
    "**Problem 2** Create a simple input prompt for two numbers from the user. These prompts should be back to back, meaning, one input request should follow the other. Store these numbers under the names var 1 and var 2. Using the two variables complete the following mathematical operations:\n",
    "1. divide var1 by var2\n",
    "2. add var1 to var2\n",
    "3. subtract var1 from var2 \n",
    "4. multiply var1 and var2\n",
    "5. compute the var1^var2\n",
    "6. compute the remainder/modolous of dividing var1 to var2\n",
    "7. compute the floor dividion of var1 by var2, assure that var1 > var 2 when testing this case.\n",
    "For each of the computations above create a print statement outlining the result. For example, var1=10 and var2=5 the ouput from adding should be \"The addition is: 15\".\n",
    "\n",
    "Test Case 1: input: 14 and 3 \n",
    "<br>ouput:<br>\n",
    "1. division:  4.666666666666667\n",
    "2. addition:  17.0\n",
    "3. subtraction:  11.0\n",
    "4. multiplication:  42.0\n",
    "5. exponent:  2744.0\n",
    "6. modulous:  2.0\n",
    "7. floor division:  4.0\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "f9682e5e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Please enter your first number:  14\n",
      "Please enter your second number:  3\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Division: 4.666666666666667\n",
      "Addition: 17.0\n",
      "Subtraction: 11.0\n",
      "Multiplication: 42.0\n",
      "Exponent: 2744.0\n",
      "Modulous: 2.0\n",
      "Floor Division: 4.0\n"
     ]
    }
   ],
   "source": [
    "var1 = float(input(\"Please enter your first number: \"))\n",
    "var2 = float(input(\"Please enter your second number: \"))\n",
    "\n",
    "print(\"Division:\", var1 / var2)\n",
    "\n",
    "print(\"Addition:\", var1 + var2)\n",
    "\n",
    "print(\"Subtraction:\", var1 - var2)\n",
    "\n",
    "print(\"Multiplication:\", var1 * var2)\n",
    "\n",
    "print(\"Exponent:\", var1 ** var2)\n",
    "\n",
    "print(\"Modulous:\", var1 % var2)\n",
    "\n",
    "print(\"Floor Division:\", var1 // var2)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7fef6f27",
   "metadata": {},
   "source": [
    "**Problem 3** PEMDAS is hihgly important in coding. Using paranthesis to create associative properties to assure you track paranthesis placement and execution. \n",
    "\n",
    "1. 2 X {8^2 -7 X \\[32- 4 X \\[3^2+1\\]\\] X -1}\n",
    "The result should be 16. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "17d1d579",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Problem Result: 16\n"
     ]
    }
   ],
   "source": [
    "result = 2 * (8**2 - 7 * (32 - 4 * (3**2 + 1)) * -1)\n",
    "print(\"Problem Result:\", result)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "26713c5a",
   "metadata": {},
   "source": [
    "**Problem 4** \n",
    "Create a simple script that will take a word from the user. This word can be any word. The goal of the script is to return the first, middle, and last letter of the word as an output. \n",
    "\n",
    "*Hint: the function `len()` returns the length of a string, use floor division to determine the index of the middle letter. This is because an even letter word may not have a middle letter.*\n",
    "\n",
    "*Hint: if the user enters the word 'help', then the goal is to return the first, middle, and last letter as a new word. h is the first letter, and p is the last, which is obvious, but the the middle is more difficult as the middle location is letter at the position 4/2 = 2 but position 2 is the l not the e. The output should be hep.*  \n",
    "\n",
    "*Hint: all indexes should be integers.*\n",
    "\n",
    "\n",
    "Test case 1: input: brooke output: \"Your new word is: boe\"\n",
    "\n",
    "Test case 2: input: james output: \"Your new word is: jms\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "cd1f46ee-c1a5-4e1b-bf53-8f81572a3ba1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Please enter a word:  brooke\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Your new word is: boe\n"
     ]
    }
   ],
   "source": [
    "word = input(\"Please enter a word: \")\n",
    "\n",
    "middle_index = (len(word) - 1) // 2\n",
    "f_letter = word[0]\n",
    "m_letter = word[middle_index]\n",
    "l_letter = word[-1]\n",
    "new_word = f_letter + m_letter + l_letter\n",
    "\n",
    "print(\"Your new word is: \" + new_word)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "anaconda-ai-2024.04-py310",
   "language": "python",
   "name": "conda-env-anaconda-ai-2024.04-py310-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
